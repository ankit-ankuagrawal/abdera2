<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=" "?>
<?rfc authorship="no"?>
<rfc docName="common" ipr="none">
  <front>
    <title abbrev="Common">Abdera2 - Common Library</title>
    <author fullname="James M Snell" initials="J.M." surname="Snell">
      <organization></organization>
    </author>
    <date month="December" year="2011" />
    <abstract>
      <t>TBD</t>
    </abstract>
  </front>
  <middle>

    <section title="Date-Time Handling">
    
      <t>Date and Time Handling within Abdera2 extensively leverages the 
      capabilities of both the 
      <eref target="http://joda-time.sourceforge.net/">Joda-Time</eref> and 
      <eref target="http://code.google.com/p/guava-libraries/">Guava Libraries</eref>.</t>
      
      <t>Specifically, Joda-Time handles all operations with regards to the 
      handling of the ISO-8601 formatted timestamps required by both the 
      Atom Syndication Format and JSON Activity Streams standards. The 
      Guava Library is used as the foundation for a range of utilities 
      that make working with those dates easier, and more fluid within 
      the Abdera2 API. Use of the Date-Time utilities provided by the 
      Common Library is driven deep and extensively throughout the Abdera2
      API for both the Atom Syndication Format and Activity Streams implementations.</t>
    
      <t>For example, suppose we have a stream of Activity objects and we 
      want to iterate only those published before the current date and time:</t>
      
      <figure><artwork>
import static org.apache.abdera2.activities.extra.Extra.activityPublished;
import static org.apache.abdera2.common.date.DateTimes.beforeNow;
//...

col.getItems(activityPublished(beforeNow()));
      </artwork></figure>  
      
      <t>The response to getItems() called this way will be an Iterable whose
      items specify published property values are date-times occurring before
      now. Obviously, this is a bit of a contrived example given that, typically,
      all items in the stream will be published before the current date and time,
      but you should get the basic idea.</t>
      
      <t>In the following example, we ask only for the activities that have 
      been published within the last 60 seconds:</t>
      
      <figure><artwork>
DateTime now = now();
DateTime before = now().minusSeconds(60);
col.getItems(activityPublished(atOrBetween(before,now)));
      </artwork></figure>
      
    </section>
    
    <section title="HTTP Headers">
    
      <t>TBD</t>
    
    </section>
    
    <section title="IO">
    
      <t>TBD</t>
    
    </section>
    
    <section title="IRIs">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Language Tags">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Media Types">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Pusher API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Security Utilities">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Selector Framework">
    
      <t>TBD</t>
    
    </section>
    
    <section title="URI Templates">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Text Utilities">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Request Chain API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Lightweight Map-Reduce API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Guava Extensions">
    
      <t>TBD</t>
    
    </section>
    
  </middle>
  <back></back>
</rfc>