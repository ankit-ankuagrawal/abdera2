<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=" "?>
<?rfc authorship="no"?>
<rfc docName="common" ipr="none">
  <front>
    <title abbrev="Common">Abdera2 - Common Library</title>
    <author fullname="James M Snell" initials="J.M." surname="Snell">
      <organization></organization>
    </author>
    <date month="December" year="2011" />
    <abstract>
      <t>TBD</t>
    </abstract>
  </front>
  <middle>

    <section title="Date-Time Handling">
    
      <t>Date and Time Handling within Abdera2 extensively leverages the 
      capabilities of both the 
      <eref target="http://joda-time.sourceforge.net/">Joda-Time</eref> and 
      <eref target="http://code.google.com/p/guava-libraries/">Guava Libraries</eref>.</t>
      
      <t>Specifically, Joda-Time handles all operations with regards to the 
      handling of the ISO-8601 formatted timestamps required by both the 
      Atom Syndication Format and JSON Activity Streams standards. The 
      Guava Library is used as the foundation for a range of utilities 
      that make working with those dates easier, and more fluid within 
      the Abdera2 API. Use of the Date-Time utilities provided by the 
      Common Library is driven deep and extensively throughout the Abdera2
      API for both the Atom Syndication Format and Activity Streams implementations.</t>
    
      <t>For example, suppose we have a stream of Activity objects and we 
      want to iterate only those published before the current date and time:</t>
      
      <figure><artwork>
import static org.apache.abdera2.activities.extra.Extra.activityPublished;
import static org.apache.abdera2.common.date.DateTimes.beforeNow;
//...

col.getItems(activityPublished(beforeNow()));
      </artwork></figure>  
      
      <t>The response to getItems() called this way will be an Iterable whose
      items specify published property values are date-times occurring before
      now. Obviously, this is a bit of a contrived example given that, typically,
      all items in the stream will be published before the current date and time,
      but you should get the basic idea.</t>
      
      <t>In the following example, we ask only for the activities that have 
      been published within the last 60 seconds:</t>
      
      <figure><artwork>
DateTime now = now();
DateTime before = now().minusSeconds(60);
col.getItems(activityPublished(atOrBetween(before,now)));
      </artwork></figure>
      
    </section>
    
    <section title="HTTP Headers">
    
      <t>The Abdera2 Common Library includes support for a handful of 
      complex HTTP Headers including WWW-Authenticate, Cache-Control,
      ETag, Link and Preference.</t>
      
      <section title="WWW-Authenticate">
  
        <t>The Authentication header support makes it easier to support
        custom authentication mechanisms within Abdera2 applications. 
        For instance, to use OAuth 2.0 Bearer Tokens, you can use:</t>
      
        <figure><artwork>
  Authentication bearer = 
    Authentication.make()
      .scheme("bearer")
      .param("realm", "example")
      .get();
        </artwork></figure>
      
        <figure><preamble>Which generates:</preamble><artwork>
  WWW-Authenticate: bearer realm="example"
        </artwork></figure>
        
        <t>Adding additional parameters is straightforward:</t>
        
        <figure><artwork>
  Authentication bearer = 
    Authentication.make()
      .scheme("bearer")
      .param("realm", "example")
      .param("error", "invalid_token")
      .param("error_description", "The access token expired")
      .get();
        </artwork></figure>
      
        <t>Parsing the header is equally straightforward:</t>
        
        <figure><artwork><![CDATA[
  Iterable<Authentication> auths = 
    Authentication.parse(
      "bearer realm=\"example\", error=invalid_token"+
      ", error_description=\"The access token expired\"");
  
  Authentication auth = auths.iterator().next();
  
  System.out.println(auth.getScheme());
  for (String name : auth) {
    System.out.println(
      String.format(
        "%s = %s",
        name,
        auth.getParam(name)));
  }
        ]]></artwork></figure>
      
      </section>
    
      <section title="Cache-Control">
      
        <t>The CacheControl class makes it simple to generate and parse any 
        combination of Cache-Control directives:</t>
        
        <figure><artwork>
  CacheControl cc = 
    CacheControl.make()
      .isPublic()
      .maxAge(1000)
      .mustRevalidate()
      .get();
        </artwork></figure>
      
        <figure><preamble>Generates:</preamble><artwork>
  Cache-Control: public, must-revalidate, max-age=1000
        </artwork></figure>
       
        <figure><artwork>
  CacheControl cc = 
    CacheControl.make()
      .noCache()
      .noStore()
      .noTransform()
      .isPrivate()
      .get();
        </artwork></figure>
        
        <figure><preamble>Generates:</preamble><artwork>
  Cache-Control: private, no-cache, no-store, no-transform
        </artwork></figure>
        
        <t>Extension directives are also supported:</t>
        
        <figure><artwork>
  CacheControl cc = 
    CacheControl.make()
      .isPublic()
      .extension("foo", "bar")
      .get();
        </artwork></figure>
        
        <figure><preamble>Generates:</preamble><artwork>
  Cache-Control: public, foo=bar
        </artwork></figure>
       
      </section>
      
      <section title="Entity Tags">
      
      <figure><preamble>Create a simple strong EntityTag:</preamble><artwork>
  EntityTag tag = EntityTag.create("FooBarBaz")
      </artwork></figure>
      
      <figure><preamble>Generates:</preamble><artwork>
  ETag: "FooBarBaz"
      </artwork></figure>
      
      <figure><preamble>Create a weak EntityTag:</preamble><artwork>
  EntityTag tag = EntityTag.weak("FooBarBaz");
      </artwork></figure>
      
      <figure><preamble>Generates:</preamble><artwork>
  ETag: W/"FooBarBaz"
      </artwork></figure>
      
      <figure><preamble>Generating an Entity Tag from source material:</preamble><artwork>
  EntityTag tag = EntityTag.generate("foo","bar","baz");
      </artwork></figure>
      
      <figure><preamble>Generates:</preamble><artwork>
  ETag: "6DF23DC03F9B54CC38A0FC1483DF6E21"
      </artwork></figure>
      
      <figure><preamble>Parsing Entity Tags:</preamble><artwork><![CDATA[
  Iterable<EntityTag> list = 
    EntityTag.parseTags(
      "\"FooBarBaz\", W/\"6DF23DC03F9B54CC38A0FC1483DF6E21\"");
  
  for (EntityTag tag : list) {
    System.out.println(
      String.format(
        "%s, is weak? %s",
        tag.getTag(),
        tag.isWeak()
        ));
      ]]></artwork></figure>
      
      <figure><preamble>Outputs:</preamble><artwork>
  FooBarBaz, is weak? false
  6DF23DC03F9B54CC38A0FC1483DF6E21, is weak? true
      </artwork></figure>
      
      </section>
    
      <section title="Links">
      
      <figure><artwork>
  WebLink link = 
    WebLink.make()
      .iri("styles.css")
      .rel("stylesheet")
      .title("Just an example")
      .media("print")
      .get();
      </artwork></figure>
      
      <figure><preamble>Generates:</preamble><artwork><![CDATA[
  Link: <styles.css>;rel="stylesheet";media="print";title="Just an example"
      ]]></artwork></figure>
      
      <figure><preamble>Parsing:</preamble><artwork><![CDATA[
  Iterable<WebLink> list =
    WebLink.parse(
      "<styles.css>;rel=\"stylesheet\";"+
      "media=\"print\";title=\"Just an example\"");
  
  for (WebLink link : list) {
    System.out.println(link.getIri());
    System.out.println(link.getRel());
    System.out.println(link.getMedia());
    System.out.println(link.getTitle());
  }
      ]]></artwork></figure>
      
      <figure><preamble>Outputs:</preamble><artwork>
  styles.css
  [stylesheet]
  [print]
  Just an example
      </artwork></figure>
      
      </section>
  
      <section title="Preference">
      
      <t>The <eref target="http://tools.ietf.org/html/draft-snell-http-prefer-10">Prefer header</eref> 
      is a proposed extension to HTTP.</t>
      
      <figure><artwork>
  import static org.apache.abdera2.common.http.Preference.*;
      
  System.out.println(
    toString(
      PREF_LENIENT, 
      PREF_RETURN_ASYNCH,
      WAIT(1000)));
      </artwork></figure>
      
      <figure><preamble>Generates:</preamble><artwork>
  Prefer: lenient,return-asynch,wait=1000
      </artwork></figure>
      
      <figure><preamble>Parsing:</preamble><artwork><![CDATA[
  Iterable<Preference> list = 
    parse(
      "lenient,return-asynch,wait=1000");
  
  if (contains(list, LENIENT)) {
    // use lenient processing
  }
  
  if (contains(list, RETURN_ASYNCH)) {
    // use asynchronous processing
    Preference wait = get(list, WAIT);
    long time = wait.getLongValue();
    // ...
  }
      ]]></artwork></figure>
      
      </section>
    
    </section>
    
    <section title="IO">
    
      <t>TBD</t>
    
    </section>
    
    <section title="IRIs">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Language Tags">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Media Types">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Pusher API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Security Utilities">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Selector Framework">
    
      <t>TBD</t>
    
    </section>
    
    <section title="URI Templates">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Text Utilities">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Request Chain API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Lightweight Map-Reduce API">
    
      <t>TBD</t>
    
    </section>
    
    <section title="Guava Extensions">
    
      <t>TBD</t>
    
    </section>
    
  </middle>
  <back></back>
</rfc>